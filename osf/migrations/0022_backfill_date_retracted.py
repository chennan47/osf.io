# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2017-03-14 14:41

"""
Backfill Retraction.date_retracted with `RETRACTION_APPROVED` log date.
"""

from __future__ import unicode_literals

from django.db import migrations

from osf.models import Registration, Retraction, Sanction


def set_date_retracted(*args):
    registrations = (
        Registration.objects.filter(retraction__state=Sanction.APPROVED, retraction__date_retracted=None)
        .select_related('retraction')
        .include('registered_from__logs')
        .include('registered_from__guids')
    )
    total = registrations.count()
    print('Migrating {} retractions.'.format(total))

    for registration in registrations:
        retraction_logs = registration.registered_from.logs.filter(action='retraction_approved', params__retraction_id=registration.retraction._id)
        if retraction_logs.count() != 1:
            msg = (
                'There should be a retraction_approved log for retraction {} on node {}. No retraction_approved log found.'
                if retraction_logs.count() == 0
                else 'There should only be one retraction_approved log for retraction {} on node {}. Multiple logs found.'
            )
            raise Exception(msg.format(registration.retraction._id, registration.registered_from._id))
        date_retracted = retraction_logs[0].date
        print(
            'Setting date_retracted for retraction {} to be {}, from retraction_approved node log {}.'.format(
                registration.retraction._id, date_retracted, retraction_logs[0]._id
            )
        )
        registration.retraction.date_retracted = date_retracted
        registration.retraction.save()

def unset_date_retracted(*args):
    retractions = Retraction.objects.filter(state=Sanction.APPROVED).exclude(date_retracted=None)
    print('Migrating {} retractions.'.format(retractions.count()))

    for retraction in retractions:
        retraction.date_retracted = None
        retraction.save()


class Migration(migrations.Migration):

    dependencies = [
        ('osf', '0021_retraction_date_retracted'),
    ]

    operations = [
        migrations.RunPython(set_date_retracted, unset_date_retracted)
    ]
